<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>group.msg.at.cloud</groupId>
    <artifactId>cnj-persistence-sql-backend-micro</artifactId>
    <version>${revision}${sha1}${changelist}</version>
    <packaging>war</packaging>
    <description>Cloud native Java backend demonstrating JPA persistence based on Eclipse Microprofile</description>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <javaee.version>8.0</javaee.version>
        <junit.version>5.3.2</junit.version>
        <common.persistence.jpa.version>1.0.2</common.persistence.jpa.version>
        <payara.version>5.192</payara.version>
        <microprofile.version>2.1</microprofile.version>
        <slf4j.version>1.7.25</slf4j.version>
        <docker.registry.name>docker.at41tools.k8s.aws.msgoat.eu</docker.registry.name>
        <docker.organization.name>cloudtrain</docker.organization.name>
        <docker.image.name>${docker.registry.name}/${docker.organization.name}/${project.artifactId}</docker.image.name>
        <docker.removeMode>all</docker.removeMode>
        <docker.cleanup>try</docker.cleanup>
        <docker.verbose>true</docker.verbose>
        <flyway.version>5.2.4</flyway.version>
        <postgres.jdbc.version>42.2.5</postgres.jdbc.version>
        <maven.docker.plugin.version>0.27.2</maven.docker.plugin.version>
        <maven.compose.plugin.version>1.0.0</maven.compose.plugin.version>
        <maven.enforcer.plugin.version>3.0.0-M2</maven.enforcer.plugin.version>
        <maven.failsafe.plugin.version>2.22.1</maven.failsafe.plugin.version>
        <maven.surefire.plugin.version>2.22.1</maven.surefire.plugin.version>
        <maven.compiler.plugin.version>3.8.0</maven.compiler.plugin.version>
        <maven.jar.plugin.version>3.1.1</maven.jar.plugin.version>
        <maven.resources.plugin.version>3.1.0</maven.resources.plugin.version>
        <maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
        <maven.deploy.plugin.version>2.8.2</maven.deploy.plugin.version>
        <maven.install.plugin.version>2.5.2</maven.install.plugin.version>
        <maven.site.plugin.version>3.7.1</maven.site.plugin.version>
        <maven.war.plugin.version>3.2.2</maven.war.plugin.version>
        <maven.payara.micro.plugin.version>1.0.3</maven.payara.micro.plugin.version>
        <maven.helm.plugin.version>1.0.0</maven.helm.plugin.version>
        <helm.tillerNamespace>sys-tiller</helm.tillerNamespace>
        <maven.flatten.plugin.version>1.1.0</maven.flatten.plugin.version>
        <!-- new Maven version management -->
        <revision>2.0.0</revision>
        <sha1></sha1>
        <changelist></changelist>
    </properties>
    <dependencyManagement>
        <dependencies>
            <!-- Java EE 8 Web Profile API -->
            <dependency>
                <groupId>javax</groupId>
                <artifactId>javaee-web-api</artifactId>
                <version>${javaee.version}</version>
                <scope>compile</scope>
            </dependency>
            <!-- Payara Micro Profile (to be used as test runtime only!) -->
            <dependency>
                <groupId>fish.payara.extras</groupId>
                <artifactId>payara-micro</artifactId>
                <version>${payara.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- Test runtime dependencies -->
            <!-- JUnit 5.x -->
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- new dependencies for REST-based system tests -->
            <dependency>
                <groupId>io.rest-assured</groupId>
                <artifactId>rest-assured</artifactId>
                <version>3.2.0</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.hamcrest</groupId>
                <artifactId>hamcrest-all</artifactId>
                <version>1.3</version>
            </dependency>
            <!-- common persistence support -->
            <dependency>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-core</artifactId>
                <version>${flyway.version}</version>
            </dependency>
            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>${postgres.jdbc.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Payara Jakarta EE 8 runtime for testing purposes -->
        <dependency>
            <groupId>fish.payara.extras</groupId>
            <artifactId>payara-micro</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Payara MicroProfile API BOM imports all MicroProfile API's -->
        <!-- declaring this particular BOM in dependencyManagement section does not work!!! -->
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <version>${microprofile.version}</version>
            <type>pom</type>
            <scope>provided</scope>
        </dependency>
        <!-- Logging is based on SLF4J over JUL -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <!-- Test runtime dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- test dependencies -->
        <dependency>
            <groupId>group.msg.at.cloud</groupId>
            <artifactId>cnj-persistence-sql-backend-test</artifactId>
            <version>2.0.0</version>
            <scope>test</scope>
        </dependency>
        <!-- persistence dependencies -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
    </dependencies>
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven.clean.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <parameters>true</parameters>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven.deploy.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven.enforcer.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven.install.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${maven.site.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven.failsafe.plugin.version}</version>
                </plugin>
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resources.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${maven.war.plugin.version}</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
                <!-- Docker Maven plugin to build and push docker images -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${maven.docker.plugin.version}</version>
                </plugin>
                <!-- Docker Compose Maven plugin to run docker container groups for testing -->
                <plugin>
                    <groupId>group.msg.at.cloud.tools</groupId>
                    <artifactId>compose-maven-plugin</artifactId>
                    <version>${maven.compose.plugin.version}</version>
                </plugin>
                <!-- Payara MicroProfile Maven Plugin to package uber JARs from WARs-->
                <plugin>
                    <groupId>fish.payara.maven.plugins</groupId>
                    <artifactId>payara-micro-maven-plugin</artifactId>
                    <version>${maven.payara.micro.plugin.version}</version>
                </plugin>
                <!-- Flatten Maven plugin adding support of CI friendly version numbers -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>${maven.flatten.plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.5,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>${java.version}</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>pre-commit-stage</id>
            <properties>
                <test.target.route>http://localhost:38080</test.target.route>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <excludes>
                                <exclude>**/*SystemTest.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>bundle</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <payaraVersion>${payara.version}</payaraVersion>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-docker-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/docker</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                        <resource>
                                            <directory>${project.build.directory}</directory>
                                            <includes>
                                                <include>*-microbundle.jar</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${docker.image.name}</name>
                                            <build>
                                                <dockerFileDir>${project.build.directory}/docker-resources
                                                </dockerFileDir>
                                                <tags>
                                                    <tag>${project.version}</tag>
                                                </tags>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>group.msg.at.cloud.tools</groupId>
                        <artifactId>compose-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>upWithLogs</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.basedir}/src/test/docker/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>down</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.basedir}/src/test/docker/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>run-system-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <forkCount>0</forkCount>
                                    <includes>
                                        <include>**/*SystemTest.java</include>
                                    </includes>
                                    <systemPropertyVariables>
                                        <test.target.route>${test.target.route}</test.target.route>
                                    </systemPropertyVariables>
                                    <dependenciesToScan>
                                        <dependency>group.msg.at.cloud:cnj-persistence-sql-backend-test</dependency>
                                    </dependenciesToScan>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify-system-test-results</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                                <phase>verify</phase>
                                <configuration>
                                    <failIfNoTests>true</failIfNoTests>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- profile commit-stage representing commit-stage of CI build -->
        <!-- builds and analyzes all sources; runs unit tests -->
        <profile>
            <id>commit-stage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <excludes>
                                <exclude>**/*SystemTest.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>bundle</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <payaraVersion>${payara.version}</payaraVersion>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- profile dockerize-stage representing dockerize-stage of CI build -->
        <!-- builds, tests and pushes docker image -->
        <profile>
            <id>dockerize-stage</id>
            <properties>
                <maven.install.skip>true</maven.install.skip>
            </properties>
            <build>
                <plugins>
                    <!-- skip compilation, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skipMain>true</skipMain>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- skip unit tests, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- skip WAR packaging, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- copy resources for docker build applying filtering -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>resources</goal>
                                </goals>
                                <configuration>
                                    <skip>true</skip>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-docker-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/docker</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- copy previously built artifact for docker build -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>download-docker-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>${project.groupId}</groupId>
                                            <artifactId>${project.artifactId}</artifactId>
                                            <version>${project.version}</version>
                                            <classifier>microbundle</classifier>
                                            <type>jar</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                        </artifactItem>
                                    </artifactItems>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- build and push docker image -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${docker.image.name}</name>
                                            <build>
                                                <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                                                <tags>
                                                    <tag>${project.version}</tag>
                                                </tags>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-docker-image</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${docker.image.name}</name>
                                            <build>
                                                <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                                                <tags>
                                                    <tag>${project.version}</tag>
                                                </tags>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- start docker containers before running tests and stop them after running tests -->
                    <plugin>
                        <groupId>group.msg.at.cloud.tools</groupId>
                        <artifactId>compose-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>upWithLogs</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.basedir}/src/test/docker/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>down</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.basedir}/src/test/docker/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- run all system tests on started docker containers -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>run-system-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <forkCount>0</forkCount>
                                    <includes>
                                        <include>**/*SystemTest.java</include>
                                    </includes>
                                    <systemPropertyVariables>
                                        <test.target.route>${test.target.route}</test.target.route>
                                    </systemPropertyVariables>
                                    <dependenciesToScan>
                                        <dependency>group.msg.at.cloud:cnj-persistence-sql-backend-test</dependency>
                                    </dependenciesToScan>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify-system-test-results</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                                <phase>verify</phase>
                                <configuration>
                                    <failIfNoTests>true</failIfNoTests>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- profile integration-test-stage representing integration-test-stage of CI build -->
        <!-- deploys Helm release to integration test environment on Kubernetes, runs system tests and deletes the Helm release -->
        <profile>
            <id>integration-test-stage</id>
            <properties>
                <test.target.route>http://localhost:30080/${project.artifactId}</test.target.route>
                <k8s.namespace>int</k8s.namespace>
                <maven.install.skip>true</maven.install.skip>
            </properties>
            <build>
                <plugins>
                    <!-- skip compilation, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <configuration>
                            <skipMain>true</skipMain>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- skip unit tests, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- skip WAR packaging, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- copy resources for helm deployment applying filtering -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>default-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>resources</goal>
                                </goals>
                                <configuration>
                                    <skip>true</skip>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- install/upgrade helm release before running tests; delete helm release after running tests -->
                    <plugin>
                        <groupId>group.msg.at.cloud.tools</groupId>
                        <artifactId>helm-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>helm-install</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>install</goal>
                                </goals>
                                <configuration>
                                    <helmChartDirectory>src/main/helm/${project.artifactId}</helmChartDirectory>
                                    <helmReleaseName>${project.artifactId}</helmReleaseName>
                                    <helmReleaseNamespace>int</helmReleaseNamespace>
                                    <debug>true</debug>
                                </configuration>
                            </execution>
                            <execution>
                                <id>helm-delete</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>delete</goal>
                                </goals>
                                <configuration>
                                    <helmReleaseName>${project.artifactId}</helmReleaseName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- run system tests on installed helm release -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>run-system-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <forkCount>0</forkCount>
                                    <includes>
                                        <include>**/*SystemTest.java</include>
                                    </includes>
                                    <systemPropertyVariables>
                                        <test.target.route>${test.target.route}</test.target.route>
                                    </systemPropertyVariables>
                                    <dependenciesToScan>
                                        <dependency>group.msg.at.cloud:cnj-persistence-sql-backend-test</dependency>
                                    </dependenciesToScan>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify-system-test-results</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                                <phase>verify</phase>
                                <configuration>
                                    <failIfNoTests>true</failIfNoTests>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <distributionManagement>
        <repository>
            <id>at41-maven-repository</id>
            <name>msg Automotive AT Maven Releases Repository</name>
            <url>https://nexus.at.automotive.msg.team/repository/msgoat-maven-releases/</url>
        </repository>
    </distributionManagement>
</project>
